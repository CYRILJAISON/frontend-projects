{"ast":null,"code":"import { ApiMockResponse } from \"../ApiMockData/dummyData\";\nconst LocalStorageKeyName = \"kanban-boards\"; //Data Layer\n\nexport class BoardAPI {\n  async fetchBoardList() {\n    const apiData = ApiMockResponse;\n    let BoardList = []; //first check local storage if local storage is empty then add api mock data as seed\n\n    if (localStorage.getItem(LocalStorageKeyName)) {\n      var _localStorage$getItem;\n\n      const localStorageData = JSON.parse((_localStorage$getItem = localStorage.getItem(LocalStorageKeyName)) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : \"\");\n      BoardList = [...localStorageData];\n    } else {\n      BoardList = [...apiData];\n      updateLocalStorageBoards(BoardList);\n    }\n\n    return BoardList; //TODO:integrate API module when got API from backend team :)\n\n    /*\n      private readonly api = new Api();//it will have all Restful verbs functions\n      return axios.get(`ENDPOINT_GOES_HERE`)\n      .then((res: { data: any; }) => {\n        return res.data;\n      });\n      */\n  }\n\n} //BoardAPI Class End\n//Business Layer\n\nexport async function fetchBoardList() {\n  const api = new BoardAPI();\n  return api.fetchBoardList();\n}\nexport function updateLocalStorageBoards(boards) {\n  localStorage.setItem(LocalStorageKeyName, JSON.stringify(boards));\n}","map":{"version":3,"names":["ApiMockResponse","LocalStorageKeyName","BoardAPI","fetchBoardList","apiData","BoardList","localStorage","getItem","localStorageData","JSON","parse","updateLocalStorageBoards","api","boards","setItem","stringify"],"sources":["/Users/cyriljaison/Desktop/Task/Kanban/Task/src/Helper/APILayers.ts"],"sourcesContent":["import { ApiMockResponse } from \"../ApiMockData/dummyData\";\nimport { IBoard } from \"../Interfaces/Kanban\";\n\nconst LocalStorageKeyName = \"kanban-boards\";\n//Data Layer\nexport class BoardAPI {\n  async fetchBoardList(): Promise<IBoard[]> {\n    const apiData: IBoard[] = ApiMockResponse;\n    let BoardList: IBoard[] = [];\n    //first check local storage if local storage is empty then add api mock data as seed\n    if (localStorage.getItem(LocalStorageKeyName)) {\n      const localStorageData: IBoard[] = JSON.parse(\n        localStorage.getItem(LocalStorageKeyName) ?? \"\",\n      );\n      BoardList = [...localStorageData];\n    } else {\n      BoardList = [...apiData];\n      updateLocalStorageBoards(BoardList);\n    }\n\n    return BoardList;\n    //TODO:integrate API module when got API from backend team :)\n    /*\n      private readonly api = new Api();//it will have all Restful verbs functions\n      return axios.get(`ENDPOINT_GOES_HERE`)\n      .then((res: { data: any; }) => {\n        return res.data;\n      });\n      */\n  }\n} //BoardAPI Class End\n\n//Business Layer\nexport async function fetchBoardList(): Promise<IBoard[]> {\n  const api = new BoardAPI();\n  return api.fetchBoardList();\n}\nexport function updateLocalStorageBoards(boards: IBoard[]) {\n  localStorage.setItem(LocalStorageKeyName, JSON.stringify(boards));\n}\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,0BAAhC;AAGA,MAAMC,mBAAmB,GAAG,eAA5B,C,CACA;;AACA,OAAO,MAAMC,QAAN,CAAe;EACA,MAAdC,cAAc,GAAsB;IACxC,MAAMC,OAAiB,GAAGJ,eAA1B;IACA,IAAIK,SAAmB,GAAG,EAA1B,CAFwC,CAGxC;;IACA,IAAIC,YAAY,CAACC,OAAb,CAAqBN,mBAArB,CAAJ,EAA+C;MAAA;;MAC7C,MAAMO,gBAA0B,GAAGC,IAAI,CAACC,KAAL,0BACjCJ,YAAY,CAACC,OAAb,CAAqBN,mBAArB,CADiC,yEACY,EADZ,CAAnC;MAGAI,SAAS,GAAG,CAAC,GAAGG,gBAAJ,CAAZ;IACD,CALD,MAKO;MACLH,SAAS,GAAG,CAAC,GAAGD,OAAJ,CAAZ;MACAO,wBAAwB,CAACN,SAAD,CAAxB;IACD;;IAED,OAAOA,SAAP,CAdwC,CAexC;;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACG;;AAxBmB,C,CAyBpB;AAEF;;AACA,OAAO,eAAeF,cAAf,GAAmD;EACxD,MAAMS,GAAG,GAAG,IAAIV,QAAJ,EAAZ;EACA,OAAOU,GAAG,CAACT,cAAJ,EAAP;AACD;AACD,OAAO,SAASQ,wBAAT,CAAkCE,MAAlC,EAAoD;EACzDP,YAAY,CAACQ,OAAb,CAAqBb,mBAArB,EAA0CQ,IAAI,CAACM,SAAL,CAAeF,MAAf,CAA1C;AACD"},"metadata":{},"sourceType":"module"}